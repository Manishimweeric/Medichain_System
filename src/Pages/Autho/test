import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import { fetchInventory, updateInventoryQuantity } from '../../../api';
import { PlusCircle, Search, Package, AlertTriangle, RefreshCw } from 'lucide-react';

const ReplenishmentModal = ({ item, onClose, onReplenish }) => {
  const [quantity, setQuantity] = useState(0);

  const handleReplenish = () => {
    if (quantity > 0) {
      onReplenish(item.id, quantity);
      onClose();
    } else {
      toast.error('Please enter a valid quantity');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-96 transform transition-all">
        <h2 className="text-xl font-bold mb-4 text-indigo-700 flex items-center">
          <RefreshCw className="w-5 h-5 mr-2" />
          Replenish {item.name}
        </h2>
        <div className="mb-6">
          <div className="p-3 bg-indigo-50 rounded-lg mb-4">
            <label className="block text-gray-700 mb-2 font-medium">
              Current Quantity: <span className="font-bold text-indigo-700">{item.quantity}</span>
            </label>
          </div>
          <input 
            type="number" 
            value={quantity}
            onChange={(e) => setQuantity(parseInt(e.target.value) || 0)}
            className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Enter quantity to add"
            min="0"
          />
        </div>
        <div className="flex justify-end space-x-3">
          <button 
            onClick={onClose}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors font-medium"
          >
            Cancel
          </button>
          <button 
            onClick={handleReplenish}
            className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-medium"
          >
            Replenish
          </button>
        </div>
      </div>
    </div>
  );
};

const InventoryList = () => {
  const [inventoryItems, setInventoryItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCriteria, setFilterCriteria] = useState({
    lowStock: false,
    nearExpiration: false
  });
  const [selectedItemForReplenish, setSelectedItemForReplenish] = useState(null);

  useEffect(() => {
    const loadInventoryItems = async () => {
      try {
        const response = await fetchInventory();
        
        if (response.data) {
          setInventoryItems(response.data);
        } else {
          toast.error(response.message || 'Failed to fetch inventory items');
        }
        
        setLoading(false);
      } catch (error) {
        toast.error('An unexpected error occurred while fetching inventory');
        setLoading(false);
      }
    };

    loadInventoryItems();
  }, []);

  const handleReplenish = async (itemId, quantityToAdd) => {
    try {
      const response = await updateInventoryQuantity(itemId, quantityToAdd);
      
      if (response.success) {
        setInventoryItems(prevItems => 
          prevItems.map(item => 
            item.id === itemId 
              ? { ...item, quantity: item.quantity + quantityToAdd } 
              : item
          )
        );
        toast.success(`Successfully added ${quantityToAdd} to ${response.itemName}`);
      } else {
        toast.error(response.message || 'Failed to update inventory');
      }
    } catch (error) {
      toast.error('An error occurred while updating inventory');
    }
  };

  const filteredItems = inventoryItems.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          item.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          item.barcode?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const isLowStock = filterCriteria.lowStock ? item.quantity <= item.reorder_threshold : true;
    
    const isNearExpiration = filterCriteria.nearExpiration 
      ? (item.expiration_date && new Date(item.expiration_date) < new Date(Date.now() + 90 * 24 * 60 * 60 * 1000))
      : true;

    return matchesSearch && isLowStock && isNearExpiration;
  });

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this inventory item?')) {
      try {
        setInventoryItems(inventoryItems.filter(item => item.id !== id));
        toast.success('Inventory item deleted successfully');
      } catch (error) {
        toast.error('Failed to delete inventory item');
      }
    }
  };

  return (
    <div className="container mx-auto px-6 py-8 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Inventory Management</h1>
        <p className="text-gray-600">Manage your stock levels and inventory items</p>
      </div>

      <div className="bg-white shadow-lg rounded-2xl overflow-hidden border border-gray-100">
        <div className="flex flex-col md:flex-row md:items-center justify-between p-6 bg-gradient-to-r from-indigo-50 to-white border-b">
          <div className="flex-grow max-w-md mb-4 md:mb-0 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <input 
              type="text"
              placeholder="Search by name, description or barcode..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white"
            />
          </div>
          
          <div className="flex flex-col md:flex-row md:items-center space-y-3 md:space-y-0 md:space-x-6">
            <label className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox"
                checked={filterCriteria.lowStock}
                onChange={() => setFilterCriteria(prev => ({
                  ...prev, 
                  lowStock: !prev.lowStock
                }))}
                className="form-checkbox h-5 w-5 text-indigo-600 rounded"
              />
              <span className="flex items-center text-gray-700">
                <AlertTriangle className="w-4 h-4 mr-1 text-amber-500" />
                Low Stock
              </span>
            </label>
            
            <label className="flex items-center space-x-2 cursor-pointer">
              <input 
                type="checkbox"
                checked={filterCriteria.nearExpiration}
                onChange={() => setFilterCriteria(prev => ({
                  ...prev, 
                  nearExpiration: !prev.nearExpiration
                }))}
                className="form-checkbox h-5 w-5 text-indigo-600 rounded"
              />
              <span className="flex items-center text-gray-700">
                <AlertTriangle className="w-4 h-4 mr-1 text-red-500" />
                Near Expiration
              </span>
            </label>

            <Link 
              to="/procurement/AddInventory" 
              className="flex items-center px-4 py-2 text-white bg-indigo-600 border border-indigo-700 rounded-lg hover:bg-indigo-700 transition-colors md:ml-4"
            >
              <PlusCircle className="w-4 h-4 mr-2" />
              Add New Item
            </Link>
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center py-16">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th> 
                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Reorder At</th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Warehouse</th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Expires</th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredItems.length > 0 ? (
                  filteredItems.map((item, index) => {
                    const isLowStock = item.quantity <= item.reorder_threshold;
                    return (
                      <tr key={item.id} className={`
                        ${isLowStock ? 'bg-red-50' : ''}
                        hover:bg-gray-50 transition-colors
                      `}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-500">
                          {index + 1}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-10 w-10 bg-indigo-100 rounded-full flex items-center justify-center">
                              <Package className="h-5 w-5 text-indigo-600" />
                            </div>
                            <div className="ml-4">
                              <div className="text-sm font-medium text-gray-900">{item.name}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-500">
                            {item.description ? (item.description.length > 30 ? item.description.slice(0, 30) + '...' : item.description) : 'N/A'}
                          </div>
                        </td>

                        <td className="px-6 py-4 whitespace-nowrap text-center">
                          <span className={`
                            px-3 py-1 inline-flex text-sm leading-5 font-medium rounded-full
                            ${isLowStock 
                              ? 'bg-red-100 text-red-800' 
                              : 'bg-green-100 text-green-800'}
                          `}>
                            {item.quantity}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                          {item.reorder_threshold}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center">
                          <span className="px-3 py-1 inline-flex text-xs leading-5 font-medium rounded-full bg-blue-100 text-blue-800">
                            {item.WareHouse_details.name}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                          {item.expiration_date || 'N/A'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center">
                          <button 
                            onClick={() => setSelectedItemForReplenish(item)}
                            className="text-indigo-600 hover:text-indigo-900 bg-indigo-50 hover:bg-indigo-100 px-3 py-1 rounded-lg transition-colors text-sm font-medium"
                          >
                            Replenish
                          </button>
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan="8" className="px-6 py-10 text-center text-gray-500">
                      <div className="flex flex-col items-center justify-center">
                        <Package className="h-12 w-12 text-gray-300 mb-2" />
                        <p>No inventory items found</p>
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}

        {!loading && (
          <div className="p-6 bg-gray-50 border-t flex justify-between items-center">
            <span className="text-sm text-gray-600 font-medium">
              Total Items: <span className="text-indigo-600 font-bold">{filteredItems.length}</span>
            </span>
            {filterCriteria.lowStock && (
              <span className="text-amber-600 text-sm font-medium flex items-center">
                <AlertTriangle className="w-4 h-4 mr-1" />
                Showing low stock items only
              </span>
            )}
          </div>
        )}
      </div>

      {selectedItemForReplenish && (
        <ReplenishmentModal 
          item={selectedItemForReplenish}
          onClose={() => setSelectedItemForReplenish(null)}
          onReplenish={handleReplenish}
        />
      )}
    </div>
  );
};

export default InventoryList;